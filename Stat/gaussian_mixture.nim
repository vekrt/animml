import distribution
import math
import arraymancer
import utils

proc mixture[T: SomeFloat](x, w: Tensor[T]; param: Tensor[Theta[T]]): T =
    return sum(w *. norm_pdf(x, param))

proc mixture[T: SomeFloat](x, w, mu1, sig1, mu2, sig2: T): T =
    return w * norm_pdf(x, mu1, sig1) + (1.0 - w) * norm_pdf(x, mu2, sig2)

proc log_likelihood[T: SomeFloat](x, w: Tensor[T]; param: Tensor[Theta[T]]): Tensor[T] =
    let d = param[0].sigma.shape[0].T
    let p = param.shape[0].int
    result = zeros[T](1, p)
    for p in 0..p-1:
        let z = (x - param[p].mu) * inv(param[p].sigma) * transpose(x - param[p].mu)
        result[0, p] = ln(w[0,p]) - 0.5 * ln(abs(det(param[p].sigma).T)) - 0.5 * z[0,0] - d * 0.5 * ln(2*PI)

proc log_likelihood[T: SomeFloat](x, w, mu, sig: T): T =
    return ln(w) - ln(sig) - 0.5 * (x - mu) * (x - mu) / (sig * sig) - 0.5 * ln(2*PI)

type
    EM_parameter[T] = object
        mu1: T
        mu2: T
        sig1: T
        sig2: T
        w1: T
        w2: T
        log_like: T
type
    EM_parameter_tensor[T] = object
        param: Tensor[Theta[T]]
        w: Tensor[T]
        log_like: T

proc get_prob[T: SomeFloat](X: Tensor[T]; param: EM_parameter_tensor[T]): Tensor[T] =
    let n = X.shape[0].int
    let p = size(param.param[0].mu).int

    var t = zeros[T](n, p)
    for i in 0..n-1:
        t[i,_] = param.w *. norm_pdf(X[i,_], param.param) /. mixture(X[i,_], param.w, param.param)
  
    return t

proc EM[T: SomeFloat](X_input: Tensor[T]; p: int; iter = 1000; cov_type = "full"): EM_parameter_tensor[T] =
    var X = X_input
    let n = X.shape[0]
    var d = X.shape[1]

    if d == 0:
        X = X.reshape(n, 1)
        d = 1

    var param = newSeq[Theta[T]](p)

    result.w = rand[T](1, p)
    result.w /= sum(result.w)

    for i in 0..p-1:
        param[i].mu = zeros[T](1, d)
        param[i].sigma = rand[T](1,1) *. eye[T](d)

    result.param = param.toTensor()

    for j in 0..iter:
        echo "Iter: ", j
        var t = zeros[T](n, p)
        result.log_like = 0.0.T
        
        for i in 0..n-1:
            t[i,_] = result.w *. norm_pdf(X[i,_], result.param) /. mixture(X[i,_], result.w, result.param)
            result.log_like += sum(t[i,_] *. log_likelihood(X[i,_], result.w, result.param))

        result.w = sum(t, axis=0)
        var sum1 = (transpose(t) * X)
        sum1 = sum1 /. transpose(result.w)
        
        for i in 0..(p-1):
            result.param[i].mu = sum1[i,_]
    
        for i in 0..p-1:
            let x_c = X -. result.param[i].mu
            let t_x_c = transpose(t[_,i] *. x_c)
            if (cov_type == "full"):
                result.param[i].sigma = t_x_c * (x_c) /. result.w[0, i]
            elif cov_type == "diag":
                var cov_diag = zeros[T](d, d)
                for k in 0..d-1:
                    cov_diag[k, k] = (t_x_c[k,_] * x_c[_,k])[0,0] / result.w[0, i]
                result.param[i].sigma = cov_diag

        result.w = result.w / n.T

proc EM[T: SomeFloat](X: openarray[T], iter = 1000): EM_parameter[T] =
    let n = len(X).T
    
    result.mu1 = 0.0.T
    result.sig1 = 1.0.T
    result.mu2 = 0.T
    result.sig2 = 1.0.T
    result.w1 = 0.7.T
    result.w2 = 1.0 - result.w1

    for j in 0..iter:
        var t = newSeq[T](n.int)
        result.log_like = 0.0.T
        for i, x in X.pairs:
            t[i] = result.w1 * norm_pdf(x, result.mu1, result.sig1) / (result.w1 * norm_pdf(x, result.mu1, result.sig1) + result.w2 * norm_pdf(x, result.mu2, result.sig2))
            result.log_like += t[i] * log_likelihood(x, result.w1, result.mu1, result.sig1) + (1.0 - t[i]) * log_likelihood(x, result.w2, result.mu2, result.sig2)
            
        result.w1 = sum(t)
        result.w2 = n - result.w1
        
        var sum1, sum2 : T = 0.0
        for i, x in X.pairs:
            sum1 += t[i] * x
            sum2 += (1.0 - t[i]) * x

        result.mu1  = sum1 / result.w1
        result.mu2  = sum2 / result.w2

        sum1 = 0.0
        sum2 = 0.0
        for i, x in X.pairs:
            sum1 += t[i] * (x - result.mu1) * (x - result.mu1)
            sum2 += (1.0 - t[i]) * (x - result.mu2) * (x - result.mu2)

        result.sig1 = sqrt(sum1 / result.w1)
        result.sig2 = sqrt(sum2 / result.w2)
        
        result.w1 /= n
        result.w2 /= n
        
#var X = [ 0.68238722, -0.51181756, -1.43924733, -0.82916355, -0.76011541,
#          0.88433981, -0.63458796, -0.29918832, -0.57144137, -0.7578267 ,
#         -1.64671552, -0.74981501,  0.83580336,  1.54306374, -1.52781273,
#         -1.18817407, -0.33885824,  0.88261118,  1.71599504, -0.7379742 ,
#         -1.81939589, -0.44898632, -0.20638819,  0.46373675,  0.93046093,
#         -0.06216656, -0.27071339, -0.09594186,  0.20459826,  1.4941621 ,
#          2.94597009,  2.85557203,  3.06508028,  3.11077454,  3.08680761,
#          3.07049496,  2.92744475,  3.06408561,  3.02133453,  3.00338784,
#          2.92398888,  2.9451516 ,  3.09100226,  2.79572741,  3.10060403,
#          2.91786002,  3.04026972,  3.04323188,  3.04286756,  3.05532172,
#          3.11628005,  2.87688328,  2.97250373,  3.01695534,  2.96532694,
#          3.09225888,  3.14911674,  2.93783914,  2.99057161,  3.18281211,
#          2.99673667,  2.94816743,  2.91871536,  3.16939871,  3.23834081,
#          2.95847384,  2.9868994 ,  2.95374333,  3.02382659,  3.06584826,
#          3.05853691,  3.12093446,  2.98268861,  3.01717087,  3.06672927,
#          3.12595564,  2.84814419,  3.00850936,  3.01572581,  2.9392598 ,
#          3.10611518,  3.15184075,  2.88451842,  2.83132295,  3.03210249,
#          2.77047079,  2.92176599,  3.01112969,  2.92061589,  2.92880142,
#          2.96701525,  3.10922538,  3.00605992,  3.05688692,  3.04543599,
#          2.96039648,  3.15775099,  3.00398583,  3.07711284,  2.8957944 ]

#var X = [ 0.59045524,  0.1348911 ,  0.97002753,  0.54032041,  0.09238116,
#        1.03173111,  0.61626294,  1.92103991, -0.71580129, -0.65494844,
#        0.16371767, -1.23572836, -0.3328826 , -0.74783955, -1.06979448,
#       -1.9808747 ,  2.02948019, -1.8180456 ,  0.50429223,  1.04144791,
#       -1.17558458, -0.24240667,  1.44559803,  1.22612777, -0.6465019 ,
#        0.12218146,  0.30116038,  0.11253883, -2.25952263,  0.51225071,
#        0.84116513, -1.18011259,  0.18291349,  0.9492665 , -0.91174866,
#       -0.60123182, -2.25008622,  0.00545463,  0.88548587, -1.36426156,
#        0.34398982, -1.18030601,  0.49196836,  1.07728969,  1.06499143,
#        1.12362104, -0.16104258, -0.5827204 ,  0.02109221, -1.70083017,
#       -1.38904645,  1.64913982,  1.86439465,  0.49870541, -0.44911813,
#       -1.32638192, -0.43765081,  1.80225062, -0.23750954,  2.01515928,
#        2.97779251,  3.17236519,  3.11268417,  2.95808365,  2.97482691,
#        3.1425929 ,  2.98375475,  3.1759573 ,  2.9330927 ,  3.02576023,
#        3.15054918,  3.0859506 ,  2.92133641,  2.95301858,  3.09514061,
#        2.94303397,  3.06676624,  3.08860884,  2.95441387,  2.86195887,
#        3.00076711,  2.96050409,  3.0828922 ,  2.85888026,  2.8515371 ,
#        3.18975683,  3.07698304,  2.97169079,  3.01230883,  3.00944277,
#        3.05851679,  3.05844635,  2.99542454,  2.88797959,  2.8589828 ,
#        3.1263787 ,  3.01428113,  2.97782821,  3.09290039,  3.04496123,
#        2.90232155,  2.98953122,  3.03218128,  3.11815988,  2.98079716,
#        3.00157373,  3.16376239,  2.98778437,  3.02848703,  2.96609838,
#        2.85917781,  3.12964272,  3.04255949,  2.96212213,  2.93870783,
#        3.04446789,  3.03060031,  2.92594157,  2.87060477,  3.03150396,
#        2.98035601,  3.19843474,  3.01064491,  2.94517868,  3.09398074,
#        2.97683615,  3.10332154,  2.94359544,  2.85192614,  3.16724095,
#        3.01042326,  2.89280126,  2.86025151,  2.88221536,  2.84480025,
#        2.9404438 ,  3.02489051,  3.2691397 ,  3.0009546 ,  2.9961324 ,
#        3.15215481,  3.06504984,  2.94174317,  3.0130171 ,  3.16337019,
#        2.89492337,  2.92083174,  2.87638992,  2.83878151,  3.06478295,
#        2.97389712,  3.06579715,  3.05926299,  2.95067073,  3.06178436,
#        3.10366209,  2.98952018,  3.02067685,  3.10060893,  2.97132398,
#        3.03727636,  2.80586715,  2.96885566,  3.04127709,  2.99853655,
#        2.87392367,  3.14460118,  3.12510486,  2.96073059,  3.05658574,
#        3.0410175 ,  3.11608661,  2.98269887,  3.05010352,  3.0843055 ,
#        3.09552844,  2.96575588,  3.06711435,  3.13818356,  2.93552357,
#        2.99457526,  2.9656366 ,  2.98486576,  2.9133727 ,  2.90196292,
#        2.98311716,  3.11485419,  2.97439038,  3.03456976,  3.02515469,
#        3.07641129,  3.114976  ,  2.89438558,  3.01390451,  3.06610088,
#        3.01155873,  2.91827538,  2.99282952,  2.89394158,  2.97688921]
#

var X = [[-1.5970601 , -1.5334053 ],
       [-0.36740943, -1.21026283],
       [-0.82363181, -2.00889032],
       [-2.78294025, -2.78612168],
       [-1.66293075, -1.32761181],
       [-1.15422755, -1.34846948],
       [-2.2087211 , -0.25256768],
       [-1.66860569, -0.50827675],
       [-2.43538674, -0.83618018],
       [-1.33984631, -1.83707236],
       [-0.58614814, -0.39251943],
       [-1.00003745, -1.72579641],
       [-1.34965053, -2.0406415 ],
       [-1.20594851, -0.74161406],
       [-1.62931449, -1.19924403],
       [-1.68427415, -1.97963736],
       [-2.2129411 , -3.51756908],
       [-2.00134967, -1.66372976],
       [-1.41668805,  0.08629403],
       [ 0.19715378,  0.3567039 ],
       [-1.60924177, -1.54809452],
       [-1.58189423, -0.98787188],
       [-0.87622391, -0.87752989],
       [ 0.21782725, -0.09279553],
       [ 0.85885741, -1.23570607],
       [-0.900498  , -1.78994631],
       [-0.10281507, -0.88189138],
       [-2.57282469, -2.33323766],
       [-0.86345716, -0.9759976 ],
       [-2.07939902, -1.2526774 ],
       [ 0.40845582, -1.09906728],
       [-1.48859863, -0.44860072],
       [-2.19352667, -1.08448842],
       [-2.3722598 , -2.69827042],
       [ 0.09546154,  0.34058245],
       [-0.552696  , -1.16144471],
       [-1.6775195 , -1.97192263],
       [-0.62790414, -2.70303284],
       [-1.57796164, -1.22992352],
       [-1.85763097, -2.75826361],
       [ 0.31612575, -0.2479819 ],
       [-0.00602156, -0.95028128],
       [ 0.28573261, -0.28634917],
       [-1.54713104, -1.42184246],
       [-2.62106135, -1.79228415],
       [-1.00175366, -1.52726892],
       [ 1.6435793 , -0.71280934],
       [ 1.19735471,  0.54483859],
       [-1.14166039, -1.72852212],
       [-0.49572115, -1.26681943],
       [ 0.36048637,  0.0436628 ],
       [ 0.44167364,  0.07482484],
       [-1.51976884, -0.70595032],
       [-0.25752192, -1.7180799 ],
       [-0.95476534, -0.82997645],
       [-1.98745745, -1.70698682],
       [-1.5984962 , -3.10998789],
       [ 0.07225538, -0.30072511],
       [-0.51658922, -1.61825682],
       [-0.48340682, -0.97928601],
       [-2.06922317, -0.83715774],
       [-1.68650644, -1.37516808],
       [-1.29266054,  0.10147854],
       [-0.62707099, -1.70553142],
       [-0.0895563 ,  0.42669344],
       [ 0.90133311, -0.20058223],
       [ 0.09361535,  0.54527951],
       [-0.50307869, -0.6737677 ],
       [ 0.45997837, -1.00073091],
       [-0.78995991,  1.06277507],
       [-0.08295727,  0.1230482 ],
       [-0.480483  , -0.77981036],
       [-1.85290875, -1.69313094],
       [-0.84695074, -0.66378746],
       [ 0.07440798, -0.37868613],
       [-0.71755517, -0.59557283],
       [-1.0493001 ,  0.02531932],
       [-1.21512955, -1.76882537],
       [ 0.86492515, -0.13734409],
       [-1.38610547, -0.27471696],
       [-1.40028042, -2.05219362],
       [ 0.09147224,  0.766969  ],
       [ 0.69071042,  0.52581514],
       [-0.43546522, -2.04225071],
       [-1.60955523, -3.95280041],
       [-1.45675324, -1.41927791],
       [-0.55974588, -1.22197161],
       [-1.01873471, -3.58552086],
       [-0.47235635, -0.62430809],
       [-2.64055896, -1.56691561],
       [-2.24818571, -2.12252947],
       [-1.13651468, -2.00081934],
       [ 0.62695711,  0.64692057],
       [ 0.02413443, -0.49308991],
       [-1.47818125, -2.01291031],
       [ 1.05914644,  0.3938836 ],
       [-0.4417027 , -1.8744573 ],
       [-3.05685645, -2.37326882],
       [-0.55563336,  0.24167162],
       [-0.21385775,  0.26918158],
       [-0.25438148, -1.30853027],
       [-0.64521384, -1.62067449],
       [ 0.82710377,  1.21367243],
       [ 1.00504957,  1.31919921],
       [-0.43234503,  0.81494616],
       [-3.20778564, -2.97623992],
       [-2.43426365, -1.57612817],
       [-2.19379121, -2.64229757],
       [-1.82246216, -3.12833544],
       [ 1.19443853, -1.43535935],
       [-0.35716517, -1.21244091],
       [-0.8295973 , -0.53428443],
       [-0.74352759, -0.95794791],
       [-1.07941061, -1.69409265],
       [-0.96314822, -1.72223527],
       [ 0.24826868, -1.25751143],
       [-1.46450614, -1.79015931],
       [ 1.81966741, -0.6021361 ],
       [-2.90724533, -2.32133661],
       [-0.3771276 , -0.79003875],
       [-0.61370284, -1.22411085],
       [-1.79442863, -2.14777326],
       [-1.4762803 , -0.5982493 ],
       [ 0.08006509, -0.6933354 ],
       [-2.80311242, -1.71552066],
       [-2.09454498, -2.58856207],
       [-0.91311452, -0.08797862],
       [ 1.22519564,  0.36344102],
       [-0.50021514, -1.34107143],
       [-0.71251175, -1.26254286],
       [-0.87465093, -1.38824408],
       [ 1.22961713,  1.14590076],
       [-0.96912929, -1.62856693],
       [-2.0623964 , -0.03747071],
       [-0.18217828, -0.7621239 ],
       [-0.6471215 , -0.97412341],
       [-0.18233391,  0.91706802],
       [-0.81119743, -1.89857148],
       [ 0.18288851, -0.56575356],
       [-0.20252114,  0.50941127],
       [ 2.20213958,  2.63493816],
       [ 3.99535554,  1.27095406],
       [-0.05522576,  2.30778384],
       [ 0.07160923,  0.70004721],
       [ 0.33574233,  0.48860691],
       [ 1.63402693,  0.11295088],
       [ 1.14658453,  1.54179514],
       [ 3.41443167,  1.04159593],
       [ 1.38166888,  0.81038069],
       [ 3.59846152,  1.09704104],
       [ 1.75010002,  0.39898719],
       [ 0.37206052,  1.62042235],
       [ 2.0520216 ,  3.13930591],
       [ 0.7146116 ,  1.42752649],
       [ 0.78181413,  0.893356  ],
       [ 1.56811195,  1.26679765],
       [ 3.15723184,  1.004375  ],
       [ 1.46682967,  1.50869475],
       [ 2.56678667,  1.23911398],
       [ 1.21245566,  0.4043515 ],
       [ 2.26513894,  1.40567802],
       [ 0.70015059,  2.11581763],
       [ 0.99154637,  1.1516179 ],
       [ 0.93688547,  0.13810306],
       [ 4.37202071,  1.51221073],
       [ 0.92449082,  0.96212332],
       [ 3.63394404,  0.08619247],
       [ 1.11369095,  0.74920684],
       [ 1.58917707,  1.64814265],
       [ 2.09442276,  1.42506689],
       [ 0.48798461,  1.32527754],
       [ 2.89578171, -0.2354772 ],
       [ 0.74462752,  1.30512235],
       [ 0.46524622,  1.20463647],
       [ 3.09373671,  1.71582474],
       [ 2.16351892,  1.78069845],
       [ 3.20587407,  1.39703284],
       [ 1.83082126,  1.66158291],
       [ 1.39549616,  0.68678633],
       [ 2.48632544,  1.53938336],
       [ 2.47834866,  0.6863249 ],
       [ 0.52897671,  0.91604826],
       [ 3.33522666, -0.4999264 ],
       [ 3.18406441,  2.00252763],
       [ 1.55549467,  1.97440072],
       [ 2.68413375,  1.96939469],
       [ 1.65687226,  1.45954029],
       [ 0.28671887,  1.32867925],
       [ 2.07541564,  0.81058997],
       [-0.23662831,  1.46202109],
       [ 2.16262073,  2.50275675],
       [ 1.7033583 ,  0.72876082],
       [ 2.10125099,  0.160922  ],
       [ 2.45264953,  0.75559029],
       [ 2.68610023,  2.35040421],
       [ 1.63820886, -0.17964119],
       [ 2.9132898 ,  0.11561398],
       [-1.21851745, -0.30164769],
       [ 3.15537226,  0.74211526],
       [ 2.66280717,  1.73435656]].toTensor()

#var X = [-7.32550636e-01]
let iter = 100
let res_tensor = EM(X, 2, iter=iter, "full")
#echo "Simple: " 
#let res = EM(X, iter=iter)
echo "Result: "
echo res_tensor.param[0].mu, " ", res_tensor.param[0].sigma
echo res_tensor.param[1].mu, " ", res_tensor.param[1].sigma
echo res_tensor.w, sum(res_tensor.w)
echo res_tensor.log_like / 200.0
echo get_prob(X, res_tensor)
#echo "Simple: "
#echo res
#echo res.w1 + res.w2

#var test : EM_parameter_tensor[float]
#test.w = [0.7, 0.3].toTensor().reshape(1,2)
#let param1 : Theta[float] = (zeros[float](1,1), 2.1*eye[float](1))
#let param2 : Theta[float] = (zeros[float](1,1), eye[float](1))
#
#test.param = [param1, param2].toTensor()
#
#let n = X.shape[0].int
#X = X.reshape(n, 1)
#echo X.shape
